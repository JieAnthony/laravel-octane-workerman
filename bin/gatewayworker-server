#!/usr/bin/env php
<?php

use Workerman\Worker as WorkermanWorker;
use Workerman\Connection\TcpConnection;

ini_set('display_errors', 'on');
error_reporting(E_ALL);

// ignore args for \Throwable::getTrace(), must be set true.
// used for ini_set('zend.exception_ignore_args', true);
ini_set('zend.exception_ignore_args', 'on');

$_SERVER['APP_BASE_PATH'] = $_SERVER['APP_BASE_PATH'] ?? getenv('PWD');
require $_SERVER['APP_BASE_PATH']. '/vendor/laravel/octane/bin/bootstrap.php';

$serverStateFilepath = $_SERVER['argv'][2] ?? $_SERVER['APP_BASE_PATH'].'/storage/logs/octane-server-state.json';
if (!is_file($serverStateFilepath)) {
    exit(-1);
}
$serverState = json_decode(file_get_contents($serverStateFilepath ?? ''), true);

define('MAX_REQUEST', (int) $serverState['state']['maxRequests']);

date_default_timezone_set($serverState['state']['timezone']);

$octaneConfig = $serverState['state']['octaneConfig'];

$workermanConfig = $octaneConfig['workerman'];

if ($workermanConfig['memory_limit']) {
    ini_set('memory_limit', $workermanConfig['memory_limit']);
}

$httpConfig = $workermanConfig['http'];
$httpConfig['maxPackageSize'] = $httpConfig['maxPackageSize'] ?? 10 * 1024 * 1024;
$httpConfig['listen'] = $httpConfig['listen'] ?? "http://{$serverState['state']['host']}:{$serverState['state']['port']}";

WorkermanWorker::$onMasterReload = function () {
    if (function_exists('opcache_get_status')) {
        if ($status = opcache_get_status()) {
            if (isset($status['scripts']) && $scripts = $status['scripts']) {
                foreach (array_keys($scripts) as $file) {
                    opcache_invalidate($file, true);
                }
            }
        }
    }
};

WorkermanWorker::$pidFile = $httpConfig['pidFile'];
WorkermanWorker::$stdoutFile = $httpConfig['stdoutFile'];
WorkermanWorker::$logFile = $httpConfig['logFile'];
WorkermanWorker::$daemonize = $serverState['state']['daemon'];

TcpConnection::$defaultMaxPackageSize = $httpConfig['maxPackageSize'];

require_once __DIR__."/createGatewayWorker.php";

// Windows does not support custom processes.
if (\DIRECTORY_SEPARATOR === '/') {
    $process = $workermanConfig['process'] ?? [];
    foreach ($process as $process_name => $config) {
        if ($config['enable'] ?? true) {
            worker_start($process_name, $config);
        }
    }

    foreach (webman_config('plugin') ?? [] as $firm => $projects) {
        foreach ($projects as $name => $project) {
            foreach ($project['process'] ?? [] as $process_name => $config) {
                if ($config['enable'] ?? true) {
                    worker_start("plugin.$firm.$name.$process_name", $config);
                }
            }
        }
    }
}

if (!empty($workermanConfig['eventLoopClass'])) {
    if(class_exists($workermanConfig['eventLoopClass'])) {
        WorkermanWorker::$eventLoopClass = $workermanConfig['eventLoopClass'];
    }
}

WorkermanWorker::runAll();
